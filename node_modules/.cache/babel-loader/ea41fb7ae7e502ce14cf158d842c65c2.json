{"ast":null,"code":"var _jsxFileName = \"/Users/user1/Desktop/Assignment1/src/pages/favoriteMoviesPage.js\";\nimport React, { useContext } from \"react\";\nimport PageTemplate from \"../components/templateMovieListPage\";\nimport { MoviesContext } from \"../contexts/moviesContext\";\nimport { useQueries } from \"react-query\";\nimport { getMovie } from \"../api/tmdb-api\";\nimport Spinner from '../components/spinner';\nimport RemoveFromFavorites from \"../components/cardIcons/removeFromFavorites\";\nimport WriteReview from \"../components/cardIcons/writeReview\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FavoriteMoviesPage = () => {\n  const {\n    favorites: movieIds\n  } = useContext(MoviesContext); // Create an array of queries and run in parallel.\n\n  const favoriteMovieQueries = useQueries(movieIds.map(movieId => {\n    return {\n      queryKey: [\"movie\", {\n        id: movieId\n      }],\n      queryFn: getMovie\n    };\n  })); // Check if any of the parallel queries is still loading.\n\n  const isLoading = favoriteMovieQueries.find(m => m.isLoading === true);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n\n  const movies = favoriteMovieQueries.map(q => {\n    q.data.genre_ids = q.data.genres.map(g => g.id);\n    return q.data;\n  });\n  return /*#__PURE__*/_jsxDEV(PageTemplate, {\n    title: \"Favorite Movies\",\n    movies: movies,\n    action: movie => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(RemoveFromFavorites, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(WriteReview, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\nexport default FavoriteMoviesPage;","map":{"version":3,"sources":["/Users/user1/Desktop/Assignment1/src/pages/favoriteMoviesPage.js"],"names":["React","useContext","PageTemplate","MoviesContext","useQueries","getMovie","Spinner","RemoveFromFavorites","WriteReview","FavoriteMoviesPage","favorites","movieIds","favoriteMovieQueries","map","movieId","queryKey","id","queryFn","isLoading","find","m","movies","q","data","genre_ids","genres","g","movie"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,mBAAP,MAAgC,6CAAhC;AACA,OAAOC,WAAP,MAAwB,qCAAxB;;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,QAAM;AAACC,IAAAA,SAAS,EAAEC;AAAZ,MAAyBV,UAAU,CAACE,aAAD,CAAzC,CAD+B,CAG/B;;AACA,QAAMS,oBAAoB,GAAGR,UAAU,CACrCO,QAAQ,CAACE,GAAT,CAAcC,OAAD,IAAa;AACxB,WAAO;AACLC,MAAAA,QAAQ,EAAE,CAAC,OAAD,EAAU;AAAEC,QAAAA,EAAE,EAAEF;AAAN,OAAV,CADL;AAELG,MAAAA,OAAO,EAAEZ;AAFJ,KAAP;AAID,GALD,CADqC,CAAvC,CAJ+B,CAY/B;;AACA,QAAMa,SAAS,GAAGN,oBAAoB,CAACO,IAArB,CAA2BC,CAAD,IAAOA,CAAC,CAACF,SAAF,KAAgB,IAAjD,CAAlB;;AAEA,MAAIA,SAAJ,EAAe;AACb,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMG,MAAM,GAAGT,oBAAoB,CAACC,GAArB,CAA0BS,CAAD,IAAO;AAC7CA,IAAAA,CAAC,CAACC,IAAF,CAAOC,SAAP,GAAmBF,CAAC,CAACC,IAAF,CAAOE,MAAP,CAAcZ,GAAd,CAAkBa,CAAC,IAAIA,CAAC,CAACV,EAAzB,CAAnB;AACA,WAAOM,CAAC,CAACC,IAAT;AACD,GAHc,CAAf;AAKA,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,iBADR;AAEE,IAAA,MAAM,EAAEF,MAFV;AAGE,IAAA,MAAM,EAAGM,KAAD,IAAW;AACjB,0BACE;AAAA,gCACE,QAAC,mBAAD;AAAqB,UAAA,KAAK,EAAEA;AAA5B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,WAAD;AAAa,UAAA,KAAK,EAAEA;AAApB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,sBADF;AAMD;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAtCD;;AAwCA,eAAelB,kBAAf","sourcesContent":["import React, { useContext } from \"react\";\r\nimport PageTemplate from \"../components/templateMovieListPage\";\r\nimport { MoviesContext } from \"../contexts/moviesContext\";\r\nimport { useQueries } from \"react-query\";\r\nimport { getMovie } from \"../api/tmdb-api\";\r\nimport Spinner from '../components/spinner';\r\nimport RemoveFromFavorites from \"../components/cardIcons/removeFromFavorites\";\r\nimport WriteReview from \"../components/cardIcons/writeReview\";\r\n\r\nconst FavoriteMoviesPage = () => {\r\n  const {favorites: movieIds } = useContext(MoviesContext);\r\n\r\n  // Create an array of queries and run in parallel.\r\n  const favoriteMovieQueries = useQueries(\r\n    movieIds.map((movieId) => {\r\n      return {\r\n        queryKey: [\"movie\", { id: movieId }],\r\n        queryFn: getMovie,\r\n      };\r\n    })\r\n  );\r\n  // Check if any of the parallel queries is still loading.\r\n  const isLoading = favoriteMovieQueries.find((m) => m.isLoading === true);\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  const movies = favoriteMovieQueries.map((q) => {\r\n    q.data.genre_ids = q.data.genres.map(g => g.id)\r\n    return q.data\r\n  });\r\n\r\n  return (\r\n    <PageTemplate\r\n      title=\"Favorite Movies\"\r\n      movies={movies}\r\n      action={(movie) => {\r\n        return (\r\n          <>\r\n            <RemoveFromFavorites movie={movie} />\r\n            <WriteReview movie={movie} />\r\n          </>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FavoriteMoviesPage;"]},"metadata":{},"sourceType":"module"}