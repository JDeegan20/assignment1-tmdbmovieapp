{"ast":null,"code":"var _jsxFileName = \"/Users/user1/Desktop/Assignment1/src/contexts/moviesContext.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MoviesContext = /*#__PURE__*/React.createContext(null);\n\nconst MoviesContextProvider = props => {\n  const [myReviews, setMyReviews] = useState({});\n  const [favorites, setFavorites] = useState([]);\n  const [playlist, setPlaylist] = useState([]);\n\n  const addToFavorites = movie => {\n    let newFavorites = [...favorites];\n\n    if (!favorites.includes(movie.id)) {\n      newFavorites.push(movie.id);\n    }\n\n    setFavorites(newFavorites);\n  };\n\n  const addToPlaylist = movie => {\n    let newPlaylist = [...playlist];\n\n    if (!playlist.includes(movie.id)) {\n      newPlaylist.push(movie.id);\n    }\n\n    setPlaylist(newPlaylist);\n  };\n\n  console.log(playlist); // We will use this function in a later section\n\n  const removeFromFavorites = movie => {\n    setFavorites(favorites.filter(mId => mId !== movie.id));\n  };\n\n  const addReview = (movie, review) => {\n    setMyReviews({ ...myReviews,\n      [movie.id]: review\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(MoviesContext.Provider, {\n    value: {\n      favorites,\n      addToFavorites,\n      addToPlaylist,\n      removeFromFavorites,\n      addReview\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\nexport default MoviesContextProvider;","map":{"version":3,"sources":["/Users/user1/Desktop/Assignment1/src/contexts/moviesContext.js"],"names":["React","useState","MoviesContext","createContext","MoviesContextProvider","props","myReviews","setMyReviews","favorites","setFavorites","playlist","setPlaylist","addToFavorites","movie","newFavorites","includes","id","push","addToPlaylist","newPlaylist","console","log","removeFromFavorites","filter","mId","addReview","review","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,MAAMC,aAAa,gBAAGF,KAAK,CAACG,aAAN,CAAoB,IAApB,CAAtB;;AAEP,MAAMC,qBAAqB,GAAIC,KAAD,IAAW;AACvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAE,EAAF,CAA1C;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAE,EAAF,CAA1C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAE,EAAF,CAAxC;;AAEA,QAAMW,cAAc,GAAIC,KAAD,IAAW;AAChC,QAAIC,YAAY,GAAG,CAAC,GAAGN,SAAJ,CAAnB;;AACA,QAAI,CAACA,SAAS,CAACO,QAAV,CAAmBF,KAAK,CAACG,EAAzB,CAAL,EAAkC;AAChCF,MAAAA,YAAY,CAACG,IAAb,CAAkBJ,KAAK,CAACG,EAAxB;AACD;;AACDP,IAAAA,YAAY,CAACK,YAAD,CAAZ;AACD,GAND;;AAQA,QAAMI,aAAa,GAAIL,KAAD,IAAW;AAC/B,QAAIM,WAAW,GAAG,CAAC,GAAGT,QAAJ,CAAlB;;AACA,QAAI,CAACA,QAAQ,CAACK,QAAT,CAAkBF,KAAK,CAACG,EAAxB,CAAL,EAAiC;AAC/BG,MAAAA,WAAW,CAACF,IAAZ,CAAiBJ,KAAK,CAACG,EAAvB;AACD;;AACDL,IAAAA,WAAW,CAACQ,WAAD,CAAX;AACD,GAND;;AAOAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,QAAZ,EApBuC,CAsBvC;;AACA,QAAMY,mBAAmB,GAAIT,KAAD,IAAW;AACrCJ,IAAAA,YAAY,CAAED,SAAS,CAACe,MAAV,CACXC,GAAD,IAASA,GAAG,KAAKX,KAAK,CAACG,EADX,CAAF,CAAZ;AAGD,GAJD;;AAMA,QAAMS,SAAS,GAAG,CAACZ,KAAD,EAAQa,MAAR,KAAmB;AACnCnB,IAAAA,YAAY,CAAE,EAAC,GAAGD,SAAJ;AAAe,OAACO,KAAK,CAACG,EAAP,GAAYU;AAA3B,KAAF,CAAZ;AACD,GAFD;;AAIA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLlB,MAAAA,SADK;AAELI,MAAAA,cAFK;AAGLM,MAAAA,aAHK;AAILI,MAAAA,mBAJK;AAKLG,MAAAA;AALK,KADT;AAAA,cASGpB,KAAK,CAACsB;AATT;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA9CD;;AAgDA,eAAevB,qBAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const MoviesContext = React.createContext(null);\r\n\r\nconst MoviesContextProvider = (props) => {\r\n  const [myReviews, setMyReviews] = useState( {} ) \r\n  const [favorites, setFavorites] = useState( [] )\r\n  const [playlist, setPlaylist] = useState( [] )\r\n\r\n  const addToFavorites = (movie) => {\r\n    let newFavorites = [...favorites];\r\n    if (!favorites.includes(movie.id)){\r\n      newFavorites.push(movie.id);\r\n    }\r\n    setFavorites(newFavorites)\r\n  };\r\n  \r\n  const addToPlaylist = (movie) => {\r\n    let newPlaylist = [...playlist];\r\n    if (!playlist.includes(movie.id)){\r\n      newPlaylist.push(movie.id);\r\n    }\r\n    setPlaylist(newPlaylist);\r\n  };\r\n  console.log(playlist);\r\n\r\n  // We will use this function in a later section\r\n  const removeFromFavorites = (movie) => {\r\n    setFavorites( favorites.filter(\r\n      (mId) => mId !== movie.id\r\n    ) )\r\n  };\r\n\r\n  const addReview = (movie, review) => {\r\n    setMyReviews( {...myReviews, [movie.id]: review } )\r\n  };\r\n\r\n  return (\r\n    <MoviesContext.Provider\r\n      value={{\r\n        favorites,\r\n        addToFavorites,\r\n        addToPlaylist,\r\n        removeFromFavorites,\r\n        addReview,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </MoviesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MoviesContextProvider;"]},"metadata":{},"sourceType":"module"}